# bash completion for gn                                   -*- shell-script -*-

__gn_out_dir()
{
    _filedir -d
}

__gn_label_pattern()
{
    # TODO
    COMPREPLY=($(compgen -W "label_pattern1 label_pattern2" -- "$cur"))
}

__gn_target()
{
    # TODO
    COMPREPLY=($(compgen -W "target1 target2" -- "$cur"))
}

_gn_gn()
{
    case "$cur" in
        -*)
            ;;
        *)
            COMPREPLY=($(compgen -W "$($1 help | \
                sed -e '/^Commands/,/^$/!d' | \
                grep -oP '^\s*\K[-\w]+(?=:)')" -- "$cur"))
            ;;
    esac
}

_gn_analyze()
{
    case "$cur" in
        -*)
            ;;
        *)
            case "$pos" in
                0)
                    __gn_out_dir
                    ;;
                1 | 2)
                    _filedir json
                    ;;
            esac
            ;;
    esac
}

_gn_args()
{
    case "$cur" in
        -*)
            # TODO: Add --list=<exact_arg>
            COMPREPLY=($(compgen -W "--list --short --args
                --overrides-only --json" -- "$cur"))
            ;;
        *)
            case "$pos" in
                0)
                    __gn_out_dir
                    ;;
            esac
            ;;
    esac
}

_gn_check()
{
    case "$cur" in
        -*)
            COMPREPLY=($(compgen -W "--check-generated --check-system
                --default-toolchain --force" -- "$cur"))
            ;;
        *)
            case "$pos" in
                0)
                    __gn_out_dir
                    ;;
                1)
                    __gn_label_pattern
                    ;;
            esac
            ;;
    esac
}

_gn_clean()
{
    case "$cur" in
        -*)
            ;;
        *)
            __gn_out_dir
            ;;
    esac
}

_gn_desc()
{
    case "$cur" in
        -*)
            COMPREPLY=($(compgen -W "--default-toolchain
                --format=json" -- "$cur"))
            ;;
        *)
            case "$pos" in
                0)
                    __gn_out_dir
                    ;;
                1)
                    __gn_label_pattern
                    ;;
                2)
                    # TODO
                    COMPREPLY=($(compgen -W "what to show" -- "$cur"))
                    ;;
            esac
            ;;
    esac
}

_gn_format()
{
    case "$prev" in
        --dump-tree)
            COMPREPLY=($(compgen -W "text json" -- "$cur"))
            return
            ;;
    esac

    case "$cur" in
        -*)
            COMPREPLY=($(compgen -W "--dry-run --stdin" -- "$cur")
                $(compgen -S = -W "--dump-tree" -- "$cur"))
            [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
            ;;
        *)
            # TODO
            COMPREPLY=($(compgen -W "buildfile1 buildfile2" -- "$cur"))
            ;;
    esac
}

_gn_gen()
{
    case "$prev" in
        --ide)
            COMPREPLY=($(compgen -W "eclipse vs vs2013 vs2015 vs2017 vs2019
                xcode qtcreator json" -- "$cur"))
            return
            ;;
        --filters)
            # TODO
            return
            ;;
        # TODO: extra args
    esac

    case "$cur" in
        -*)
            COMPREPLY=($(compgen -W "--check" -- "$cur")
                $(compgen -S = -W "--ide --filters" -- "$cur"))
            # TODO: $ide
            case "$ide" in
                vs)
                    COMPREPLY+=($(compgen -W "--no-deps" -- "$cur")
                        $(compgen -S = -W "--sln --winsdk
                        --ninja-extra-args" -- "$cur"))
                    ;;
                xcode)
                    COMPREPLY+=($(compgen -S = -W "--xcode-project
                        --xcode-build-system --ninja-executable
                        --ninja-extra-args --root-target" -- "$cur"))
                    ;;
                qtcreator)
                    COMPREPLY+=($(compgen -S = -W "--root-target" -- "$cur"))
                    ;;
                json)
                    COMPREPLY+=($(compgen -S = -W "--json-file-name
                        --json-ide-script --json-ide-script-args" -- "$cur"))
                    ;;
            esac
            [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
            ;;
        *)
            case "$pos" in
                0)
                    __gn_out_dir
                    ;;
            esac
            ;;
    esac
}

_gn_help()
{
    case "$cur" in
        -*)
            ;;
        *)
            case "$pos" in
                0)
                    COMPREPLY=($(compgen -W "$($1 help | \
                        grep -oP '^\s*\K\w+(?=:)')" -- "$cur"))
                ;;
            esac
            ;;
    esac
}

_gn_ls()
{
    case "$prev" in
        --as)
            COMPREPLY=($(compgen -W "buildfile label output" -- "$cur"))
            return
            ;;
        --testonly)
            COMPREPLY=($(compgen -W "true false" -- "$cur"))
            return
            ;;
        --type)
            COMPREPLY=($(compgen -W "action copy executable group
                loadable_module shared_library" -- "$cur"))
            return
            ;;
    esac

    case "$cur" in
        -*)
            COMPREPLY=($(compgen -W "--default-toolchain" -- "$cur")
                $(compgen -S = -W "--as --testonly --type" -- "$cur"))
            [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
            ;;
        *)
            case "$pos" in
                0)
                    __gn_out_dir
                    ;;
                1)
                    __gn_label_pattern
                    ;;
            esac
            ;;
    esac
}

_gn_meta()
{
    case "$prev" in
        --data | --walk)
            local prefix=
            [[ "$cur" == *,* ]] && prefix="${cur%,*},"
            # TODO
            COMPREPLY=($(compgen -W "key1 key2" -- "${cur##*,}"))
            ((${#COMPREPLY[@]} == 1)) && COMPREPLY=(${COMPREPLY/#/$prefix})
            return
            ;;
        --rebase)
            _filedir -d
            return
            ;;
    esac

    case "$cur" in
        -*)
            COMPREPLY=($(compgen -S = -W "--data --walk --rebase" -- "$cur"))
            [[ ${COMPREPLY-} == *= ]] && compopt -o nospace
            ;;
        *)
            case "$pos" in
                0)
                    __gn_out_dir
                    ;;
                *)
                    __gn_target
                    ;;
            esac
            ;;
    esac
}

_gn_outputs()
{
    case "$cur" in
        -*)
            ;;
        *)
            case "$pos" in
                0)
                    __gn_out_dir
                    ;;
                *)
                    # TODO
                    _filedir
                    __gn_target
                    ;;
            esac
            ;;
    esac
}

_gn_path()
{
    case "$cur" in
        -*)
            COMPREPLY=($(compgen -W "--all --public --with-data" -- "$cur"))
            ;;
        *)
            case "$pos" in
                0)
                    __gn_out_dir
                    ;;
                1 | 2)
                    __gn_target
            esac
            ;;
    esac
}

# TODO: _gn_refs

_gn()
{
    local cur prev words cword
    _init_completion -s || return

    local i cmd pos=0
    for ((i = 1; i < cword; i++)); do
        case "${words[i]}" in
            -*)
                ;;
            *)
                if [ -v cmd ]; then
                    ((pos++))
                else
                    cmd=${words[i]}
                fi
                ;;
        esac
    done

    local func="_gn_${cmd:-gn}"
    declare -F "$func" > /dev/null && "$func" "$1"

    case "$cur" in
        -*)
            COMPREPLY+=($(compgen -W "$($1 help switches | \
                grep -oP '^\s*\K[-\w]+(?=:)')" -- "$cur"))
            ;;
    esac
} &&
    complete -F _gn gn

# ex: filetype=sh
